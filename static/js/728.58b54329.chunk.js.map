{"version":3,"file":"static/js/728.58b54329.chunk.js","mappings":"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","sources":["Context/todoContext.js","hooks/useTodoCRUD.js","Components/ClearAction/ClearAction.js","Components/Filters/Filters.js","Components/ItemsCounter/ItemsCounter.js","Components/MainFooter/MainFooter.js","Components/NewItem/NewItem.js","Components/CompleteTodo/CompleteTodo.js","Components/TodoItem/TodoItem.js","Components/TodoList/TodoList.js","Components/Main/Main.js"],"sourcesContent":["import React, { useContext } from \"react\";\r\n\r\nexport const TodoContext = React.createContext();\r\n\r\nexport const useTodoContext = () => {\r\n  return useContext(TodoContext);\r\n};","import { child, onValue, push, ref, remove, set, update } from \"firebase/database\";\r\nimport { useState } from \"react\";\r\nimport { useAuthContext } from \"../Context/authContext\";\r\nimport database from \"../firebase\";\r\n \r\nexport default function useTodoCRUD() {\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n  const { currentUser } =useAuthContext();\r\n\r\n  function transformTodoList(data) {\r\n    if(!data) return [];\r\n    const todoData = Object.entries(data).map((todoItem) => {\r\n      return { ...todoItem[1], key: todoItem[0] };\r\n    });\r\n    todoData.sort((a, b) => a.order - b.order);\r\n    return todoData;\r\n  }\r\n\r\n  function readTodo() {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    //https://firebase.google.com/docs/database/web/read-and-write#web_value_events\r\n    const todoData = ref(database, `users/${currentUser.uid}/todos`);\r\n    onValue(\r\n      todoData,\r\n      (snapshot) => {\r\n        const data = snapshot.val();\r\n        setTodoList(transformTodoList(data));\r\n        setLoading(false);\r\n      },\r\n      (error) => setError(error.message)\r\n    );\r\n  };\r\n\r\n  function updateTodo( todo) {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    //https://firebase.google.com/docs/database/web/read-and-write#basic_write\r\n    set(ref(database, `users/${currentUser.uid}/todos/${todo.key}`), {\r\n      action: todo.action,\r\n      completed: todo.completed,\r\n      order: todo.order,\r\n    })\r\n      .then(setLoading(false))\r\n      .catch((error) => setError(error.message));\r\n  }\r\n\r\n  function deleteTodo(todo) {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    //https://firebase.google.com/docs/database/web/read-and-write#basic_write\r\n    remove(ref(database, `users/${currentUser.uid}/todos/${todo.key}`))\r\n      .then(setLoading(false))\r\n      .catch((error) => setError(error.message));\r\n  }\r\n\r\n  function writeNewTodo(todoItem) {\r\n    setLoading(true);\r\n    setError(\"\");\r\n    // Get a key for a new Post.\r\n    const newTodoKey = push(child(ref(database), `users/${currentUser.uid}/todos`)).key;\r\n\r\n    // Write the new post's data simultaneously in the posts list and the user's post list.\r\n    const updates = {};\r\n    updates[`/users/${currentUser.uid}/todos/${newTodoKey}`] = todoItem;\r\n\r\n    return update(ref(database), updates)\r\n      .then(setLoading(false))\r\n      .catch((error) => setError(error.message));\r\n  }\r\n\r\n  return {\r\n    readTodo,\r\n    writeNewTodo,\r\n    updateTodo,\r\n    deleteTodo,\r\n    todoList,\r\n    error,\r\n    loading,\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { useTodoContext } from \"../../Context/todoContext\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\nimport \"./ClearAction.css\";\r\n\r\nfunction ClearAction() {\r\n  const todoList = useTodoContext();\r\n  const { deleteTodo } = useTodoCRUD();\r\n  const completedTodo = todoList.filter((todo) => todo.completed === true);\r\n\r\n  function clearComletedHandler() {\r\n    completedTodo.forEach(item => {\r\n      deleteTodo(item)\r\n    });\r\n  }\r\n  return (\r\n    <button className=\"clear-completed\" onClick={clearComletedHandler}>\r\n      Clear Completed\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default ClearAction;\r\n","import React, { useState } from \"react\";\r\nimport \"./Filters.css\";\r\n\r\nconst filters = [\r\n  {\r\n    name: \"All\",\r\n    is_completed: null,\r\n  },\r\n  {\r\n    name: \"Active\",\r\n    is_completed: false,\r\n  },\r\n  {\r\n    name: \"Completed\",\r\n    is_completed: true,\r\n  },\r\n];\r\nfunction Filters(props) {\r\n  const [filteredBy, setFilteredBy] = useState(filters[0].name);\r\n  const filterTodoList = (event) => {\r\n    const newFilter = event.target.textContent;\r\n    const isCompleted = filters.find((filter) => filter.name === newFilter)[\r\n      \"is_completed\"\r\n    ];\r\n    setFilteredBy(newFilter);\r\n    props.callFilterByStatus(isCompleted);\r\n  };\r\n  return (\r\n    <ul className=\"filter-list\">\r\n      {filters.map((filter, index) => {\r\n        return (\r\n          <li\r\n            key={index}\r\n            onClick={filterTodoList}\r\n            className={filteredBy === filter[\"name\"] ? \"highlight\" : \"\"}\r\n          >\r\n            {filter[\"name\"]}\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import React from \"react\";\r\n\r\nfunction ItemsCounter(props) {\r\n  return <p>{`${props.amount} items left`}</p>;\r\n}\r\n\r\nexport default ItemsCounter;\r\n","import React from \"react\";\r\nimport ClearAction from \"../ClearAction/ClearAction\";\r\nimport Filters from \"../Filters/Filters\";\r\nimport ItemsCounter from \"../ItemsCounter/ItemsCounter\";\r\nimport { useTodoContext } from \"../../Context/todoContext\";\r\nimport \"./MainFooter.css\";\r\n\r\nfunction MainFooter(props) {\r\n  const todoList = useTodoContext();\r\n  const activeItems = todoList.filter((todo) => {\r\n    return todo.completed === false;\r\n  });\r\n  function filterByStatus(isCompleted) {\r\n    props.callFilterTodoList(isCompleted);\r\n  }\r\n  return (\r\n    <div className=\"main-footer__container\">\r\n      <ItemsCounter amount={activeItems.length} />\r\n      <Filters callFilterByStatus={filterByStatus} />\r\n      <ClearAction />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainFooter;\r\n","import React, { useRef } from \"react\";\r\nimport { useTodoContext } from \"../../Context/todoContext\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\nimport { generateTodoObj } from \"../Main/Main\";\r\nimport \"./NewItem.css\";\r\n\r\nfunction NewItem() {\r\n  const newTodoActinRef = useRef();\r\n  const todoList = useTodoContext();\r\n\r\n  const { writeNewTodo, error, loading } = useTodoCRUD();\r\n\r\n  function addTodo() {\r\n    const listItem = addNewTodoAction();\r\n    if (!listItem) return;\r\n    if (error) {\r\n      console.log(error);\r\n      return;\r\n    }\r\n    writeNewTodo(listItem);\r\n    newTodoActinRef.current.value = \"\";\r\n  }\r\n\r\n  function addNewTodoAction() {\r\n    const todoAction = newTodoActinRef.current.value.trim();\r\n    if (todoAction) {\r\n      const todoNewItem = generateTodoObj(\r\n        todoAction,\r\n        todoList.length ? todoList[0].order - 1 : 0\r\n      );\r\n      return todoNewItem;\r\n    }\r\n    return;\r\n  }\r\n\r\n  return (\r\n    <div className=\"new-todo__container\">\r\n      <div\r\n        className='submit-btn__wrap'\r\n        onClick={addTodo}\r\n      >\r\n        <button\r\n          disabled={loading}\r\n          className='submit-btn'\r\n        >\r\n          <label>add</label>\r\n        </button>\r\n      </div>\r\n      <input\r\n        type=\"text\"\r\n        className='new-todo_input'\r\n        autoFocus\r\n        ref={newTodoActinRef}\r\n        placeholder=\"Start typing here\"\r\n        onKeyPress={(event) => {\r\n          if (event.key === \"Enter\") {\r\n            addTodo();\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NewItem;\r\n","import React from \"react\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\nimport \"./CompleteTodo.css\";\r\n\r\nfunction CompleteTodo({ todo }) {\r\n  const { updateTodo } = useTodoCRUD();\r\n\r\n  const checkMark = todo.completed && (\r\n    <img src=\"./images/icon-check.svg\" alt=\"Completed\" />\r\n  );\r\n\r\n  function completeTodoHandler() {\r\n    return updateTodo({ ...todo, completed: !todo.completed });\r\n  }\r\n  return (\r\n    <div\r\n      className={`border-wrap ${todo.completed && \"completed-border-wrap\"}`}\r\n      onClick={completeTodoHandler}\r\n    >\r\n      <button className={`todo-icon ${todo.completed && \"completed-todo\"}`}>\r\n        {checkMark}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompleteTodo;\r\n","import React from \"react\";\r\nimport { Draggable } from \"@hello-pangea/dnd\";\r\nimport CompleteTodo from \"../CompleteTodo/CompleteTodo\";\r\nimport \"./TodoItem.css\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\n\r\nfunction TodoItem(props) {\r\n  const { deleteTodo } = useTodoCRUD();\r\n  const { todo, index } = props;\r\n  const action = todo.completed ? <s>{todo.action}</s> : todo.action;\r\n\r\n  const deleteTodoHandler = () => {\r\n    deleteTodo(props.todo)\r\n  };\r\n\r\n  return (\r\n    <Draggable draggableId={todo.key.toString()} index={index} key={todo.key}>\r\n      {(provided) => (\r\n        <li\r\n          id={todo.key.toString()}\r\n          className='todo-item'\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          {...provided.dragHandleProps}\r\n        >\r\n          <CompleteTodo todo={todo} />\r\n          <p>{action}</p>\r\n          <img\r\n            alt=\"delete\"\r\n            src=\"./images/icon-cross.svg\"\r\n            className=\"todo-delete\"\r\n            onClick={deleteTodoHandler}\r\n          />\r\n        </li>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"../TodoItem/TodoItem\";\r\nimport { DragDropContext, Droppable } from \"@hello-pangea/dnd\";\r\nimport \"./TodoList.css\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\n\r\nfunction TodoList(props) {\r\n  const { updateTodo } = useTodoCRUD();\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    if (props.filteredTodoList.length <= 1 || !result.destination) return;\r\n    //!result.destination - to avoid errors when dropping outside our dropzone\r\n    const newIndex = result.destination.index;\r\n    const prevIndex = newIndex - 1;\r\n    const nextIndex = newIndex + 1;\r\n    const reorderedItem = props.filteredTodoList.splice(result.source.index, 1);\r\n\r\n    props.filteredTodoList.splice(newIndex, 0, ...reorderedItem);\r\n\r\n    const newOrder = () => {\r\n      if (nextIndex === props.filteredTodoList.length) {\r\n        return props.filteredTodoList[prevIndex].order + 1;\r\n      } else {\r\n        if (newIndex > 0) {\r\n          return (\r\n            (props.filteredTodoList[nextIndex].order +\r\n              props.filteredTodoList[prevIndex].order) /\r\n            2\r\n          );\r\n        } else {\r\n          return props.filteredTodoList[1].order - 1;\r\n        }\r\n      }\r\n    };\r\n    reorderedItem[0].order = newOrder();\r\n\r\n    updateTodo(reorderedItem[0]);\r\n  };\r\n\r\n  return (\r\n    //https://www.freecodecamp.org/news/how-to-add-drag-and-drop-in-react-with-react-beautiful-dnd/\r\n    <DragDropContext onDragEnd={handleOnDragEnd}>\r\n      <Droppable droppableId=\"todos\">\r\n        {(provided) => (\r\n          <ul\r\n            className=\"todo-list\"\r\n            {...provided.droppableProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {props.filteredTodoList.map((todo, index) => (\r\n              <TodoItem todo={todo} index={index} key={todo.key} />\r\n            ))}\r\n            {provided.placeholder}\r\n          </ul>\r\n        )}\r\n      </Droppable>\r\n    </DragDropContext>\r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useEffect, useMemo, useState } from \"react\";\r\nimport { TodoContext } from \"../../Context/todoContext\";\r\nimport Card from \"../../UI/Card/Card\";\r\nimport MainFooter from \"../MainFooter/MainFooter\";\r\nimport NewItem from \"../NewItem/NewItem\";\r\nimport TodoList from \"../TodoList/TodoList\";\r\nimport Loading from \"../../UI/Loading/Loading\";\r\nimport useTodoCRUD from \"../../hooks/useTodoCRUD\";\r\nimport \"./Main.css\";\r\n\r\nexport const generateTodoObj = (todoAction, index) => {\r\n  return { completed: false, action: todoAction, order: index };\r\n};\r\nfunction Main() {\r\n  const { readTodo, updateTodo, todoList, error, loading } = useTodoCRUD();\r\n  const [isCompletedFilter, setIsCompletedFilter] = useState(null);\r\n\r\n  useEffect(\r\n    () => {\r\n      readTodo();\r\n    },\r\n    [] // eslint-disable-line react-hooks/exhaustive-deps\r\n  );\r\n\r\n  const filteredTodoList = useMemo(\r\n    () =>\r\n      todoList.filter((todoItem) => {\r\n        if (isCompletedFilter === null) return true;\r\n        else return todoItem[\"completed\"] === isCompletedFilter;\r\n      }),\r\n    [todoList, isCompletedFilter]\r\n  );\r\n\r\n  function displayList() {\r\n    if (loading) {\r\n      return <Loading />;\r\n    } else {\r\n      return (\r\n        <Card>\r\n          <TodoList\r\n            callUpdateTodo={updateTodo}\r\n            filteredTodoList={filteredTodoList}\r\n          />\r\n          <MainFooter\r\n            callUpdateTodo={updateTodo}\r\n            callFilterTodoList={(isCompleted) =>\r\n              setIsCompletedFilter(isCompleted)\r\n            }\r\n          />\r\n        </Card>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TodoContext.Provider value={todoList}>\r\n        {error ? (\r\n          <p style={{ color: \"red\", textAlign: \"center\" }}>{error}</p>\r\n        ) : (\r\n          <main>\r\n            <Card>\r\n              <NewItem />\r\n            </Card>\r\n            {displayList()}\r\n          </main>\r\n        )}\r\n      </TodoContext.Provider>\r\n      <p className=\"list-instructions\"> Drag and drop to reorder list </p>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n"],"names":["TodoContext","React","useTodoContext","useContext","useTodoCRUD","useState","todoList","setTodoList","error","setError","loading","setLoading","currentUser","useAuthContext","readTodo","todoData","ref","database","uid","onValue","snapshot","data","val","Object","entries","map","todoItem","key","sort","a","b","order","transformTodoList","message","writeNewTodo","newTodoKey","push","child","updates","update","then","catch","updateTodo","todo","set","action","completed","deleteTodo","remove","completedTodo","filter","className","onClick","forEach","item","filters","name","is_completed","props","filteredBy","setFilteredBy","filterTodoList","event","newFilter","target","textContent","isCompleted","find","callFilterByStatus","index","amount","activeItems","length","callFilterTodoList","newTodoActinRef","useRef","addTodo","listItem","todoAction","current","value","trim","generateTodoObj","addNewTodoAction","console","log","disabled","type","autoFocus","placeholder","onKeyPress","checkMark","src","alt","deleteTodoHandler","draggableId","toString","provided","id","innerRef","draggableProps","dragHandleProps","onDragEnd","result","filteredTodoList","destination","newIndex","prevIndex","nextIndex","reorderedItem","splice","source","droppableId","droppableProps","isCompletedFilter","setIsCompletedFilter","useEffect","useMemo","Provider","style","color","textAlign","Card","Loading","callUpdateTodo"],"sourceRoot":""}